set.seed(2019)
index<-sample(1:dim(dt)[1],0.7*dim(dt)[1])
training_data<-dt[index,]
testing_data<-dt[-index,]

training_data[is.na(training_data)] <- 0
testing_data[is.na(testing_data)] <- 0


#RF
rf_traintemp = as.matrix(training_data[,2:234])
rf_trainy = as.matrix(training_data[,1])
rf_testtemp = as.matrix(testing_data[,2:234])
rf_testy = as.matrix(testing_data[,1])

mymodel <- randomForest(rf_traintemp,rf_trainy,ntree=500,importance = TRUE,proximity = TRUE)
print(mymodel)

rf_predict <- predict(mymodel, rf_testtemp)
rf_prediction = prediction(rf_predict, rf_testy)
rf_auc = performance(rf_prediction, 'auc')
rf_auc@y.values

#SVM

svm_traintemp = as.matrix(training_data[,2:234])
svm_trainy = as.matrix(training_data[,1])

svm_testtemp = as.matrix(testing_data[,2:234])
svm_testy = as.matrix(testing_data[,2])

svm_model <- svm(y~., svm_trainy,type="C-classification", kernel = 'radial')
print(svm_model)
svm_predict<-predict(svm_model, svm_testtemp)
svm_prediction<-prediction(svm_predict,svm_testy)
svm_auc<- performance(svm_prediction, 'auc')
svm_auc@y.values

#keras
keras_traintemp = as.matrix(training_data[,2:234])
keras_trainy = as.matrix(training_data[,1])
keras_testtemp = as.matrix(testing_data[,2:234])
keras_testy = as.matrix(testing_data[,1])

keras_model <- keras_model_sequential() 
keras_model %>% 
  layer_dense(units = 64, activation = 'relu', input_shape = c(234)) %>%
  layer_dropout(rate = 0.01) %>% 
  layer_dense(units = 32, activation = 'relu') %>%
  layer_dropout(rate = 0.01) %>% 
  layer_dense(units = 1, activation = 'sigmoid') %>% 
  compile( 
    optimizer = optimizer_rmsprop(),
    loss = loss_binary_crossentropy,
    metrics = c('accuracy')
  )
keras_test = as.matrix(testing_data)
keras_predict <- predict(keras_model, keras_test)

#glm
glm_traintemp = as.matrix(training_data[,2:234])
glm_trainy = as.matrix(training_data[,1])
glm_testtemp = testing_data[,2:234]
glm_testy = as.matrix(testing_data[,1])

all_in_one = cbind(testing_data$y, rf_predict, keras_predict)
glm_temp = as.data.frame(all_in_one)
names(glm_temp)= c("y", "RF", "Keras")
#glm_temp$y = ifelse(glm_temp$y == 2,1,0)
glm_tempy = glm_temp[,1]
glm_tempy = as.data.frame(glm_tempy)
glm_temp = as.matrix(glm_temp)
glm_model<-glm(y~.,family = binomial(link = logit), data = training_data )
summary(glm_model)
#glm_temp$y = as.matrix(glm_temp$y)
glmpredict = predict(glm_model, glm_testtemp)
glmprediction = prediction(glmpredict, glm_testy)
glm_auc <- performance(glmprediction, 'auc')
glm_auc@y.values



auto.train.x = as.matrix(training_data[,2:234])
auto.test.x = as.matrix(testing_data[,2:234])
input_layer = layer_input(shape = c(234))
encoder <- 
  layer %>% 
  layer_dense(units = 500, activation = "relu") %>% 
  layer_batch_normalization() %>% 
  layer_dropout(rate = 0.2) %>% 
  layer_dense(units = 300, activation = "relu") %>%
  layer_dropout(rate = 0.2) %>%
  layer_dense(units = 150, activation = "relu") %>%
  layer_dense(units = 100)





